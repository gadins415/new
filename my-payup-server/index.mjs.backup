import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";

const app = express();
app.use(bodyParser.json());

// 페이업 인증 정보
const PAYUP_API_BASE_URL = "https://standard.testpayup.co.kr";
const MERCHANT_ID = "kanggadin_test"; // 페이업에서 제공받은 ID
const API_KEY = "d871410a9c21470996cbe4e8cce796e2";     // 페이업에서 제공받은 키

// 1. 토큰 발급 엔드포인트
app.post("/getAccessToken", async (req, res) => {
    const url = `${PAYUP_API_BASE_URL}/auth/v1/accessToken`;

    try {
        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                merchantId: MERCHANT_ID,
                apiKey: API_KEY,
            }),
        });

        const data = await response.json();

        if (response.status === 200) {
            res.json({ accessToken: data.accessToken });
        } else {
            res.status(response.status).json({ error: data.message });
        }
    } catch (error) {
        console.error("Token generation error:", error.message);
        res.status(500).json({ error: "Failed to generate access token." });
    }
});

// 2. 결제 승인 요청 엔드포인트
app.post("/makePayment", async (req, res) => {
    const { transactionId, amount, orderNumber } = req.body;
    const url = `${PAYUP_API_BASE_URL}/api/v1/payment`;

    try {
        // 먼저 토큰 발급
        const tokenResponse = await fetch(`${PAYUP_API_BASE_URL}/auth/v1/accessToken`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                merchantId: MERCHANT_ID,
                apiKey: API_KEY,
            }),
        });

        const tokenData = await tokenResponse.json();
        const accessToken = tokenData.accessToken;

        // 결제 승인 요청
        const paymentResponse = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${accessToken}`,
            },
            body: JSON.stringify({
                transactionId,
                amount,
                orderNumber,
            }),
        });

        const paymentData = await paymentResponse.json();

        if (paymentResponse.status === 200 && paymentData.status === "SUCCESS") {
            res.json({
                responseCode: paymentData.data.responseCode,
                responseMsg: paymentData.data.responseMsg,
            });
        } else {
            res.status(400).json({
                responseCode: paymentData.messageCode,
                responseMsg: paymentData.message,
            });
        }
    } catch (error) {
        console.error("Payment approval error:", error.message);
        res.status(500).json({ error: "Failed to approve payment." });
    }
});

// 서버 실행
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

